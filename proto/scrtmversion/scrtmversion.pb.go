// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: scrtmversion.proto

package scrtmversion

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FirmwareVersion_Version int32

const (
	FirmwareVersion_VERSION_0 FirmwareVersion_Version = 0
	FirmwareVersion_VERSION_1 FirmwareVersion_Version = 1
	FirmwareVersion_VERSION_2 FirmwareVersion_Version = 2
)

// Enum value maps for FirmwareVersion_Version.
var (
	FirmwareVersion_Version_name = map[int32]string{
		0: "VERSION_0",
		1: "VERSION_1",
		2: "VERSION_2",
	}
	FirmwareVersion_Version_value = map[string]int32{
		"VERSION_0": 0,
		"VERSION_1": 1,
		"VERSION_2": 2,
	}
)

func (x FirmwareVersion_Version) Enum() *FirmwareVersion_Version {
	p := new(FirmwareVersion_Version)
	*p = x
	return p
}

func (x FirmwareVersion_Version) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FirmwareVersion_Version) Descriptor() protoreflect.EnumDescriptor {
	return file_scrtmversion_proto_enumTypes[0].Descriptor()
}

func (FirmwareVersion_Version) Type() protoreflect.EnumType {
	return &file_scrtmversion_proto_enumTypes[0]
}

func (x FirmwareVersion_Version) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FirmwareVersion_Version.Descriptor instead.
func (FirmwareVersion_Version) EnumDescriptor() ([]byte, []int) {
	return file_scrtmversion_proto_rawDescGZIP(), []int{0, 0}
}

type FirmwareVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FirmwareVersion) Reset() {
	*x = FirmwareVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scrtmversion_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareVersion) ProtoMessage() {}

func (x *FirmwareVersion) ProtoReflect() protoreflect.Message {
	mi := &file_scrtmversion_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareVersion.ProtoReflect.Descriptor instead.
func (*FirmwareVersion) Descriptor() ([]byte, []int) {
	return file_scrtmversion_proto_rawDescGZIP(), []int{0}
}

// The version number to report in the TPM event log as EV_S_CRTM_VERSION.
type SCRTMVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version FirmwareVersion_Version `protobuf:"varint,1,opt,name=version,proto3,enum=cloud_vmm_proto.FirmwareVersion_Version" json:"version,omitempty"`
}

func (x *SCRTMVersion) Reset() {
	*x = SCRTMVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scrtmversion_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRTMVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRTMVersion) ProtoMessage() {}

func (x *SCRTMVersion) ProtoReflect() protoreflect.Message {
	mi := &file_scrtmversion_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRTMVersion.ProtoReflect.Descriptor instead.
func (*SCRTMVersion) Descriptor() ([]byte, []int) {
	return file_scrtmversion_proto_rawDescGZIP(), []int{1}
}

func (x *SCRTMVersion) GetVersion() FirmwareVersion_Version {
	if x != nil {
		return x.Version
	}
	return FirmwareVersion_VERSION_0
}

var File_scrtmversion_proto protoreflect.FileDescriptor

var file_scrtmversion_proto_rawDesc = []byte{
	0x0a, 0x12, 0x73, 0x63, 0x72, 0x74, 0x6d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x76, 0x6d, 0x6d, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x49, 0x0a, 0x0f, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x30,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x31, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x32, 0x10, 0x02,
	0x22, 0x52, 0x0a, 0x0c, 0x53, 0x43, 0x52, 0x54, 0x4d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x42, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x76, 0x6d, 0x6d, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x67, 0x63, 0x65, 0x2d, 0x74, 0x63,
	0x62, 0x2d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x73, 0x63, 0x72, 0x74, 0x6d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scrtmversion_proto_rawDescOnce sync.Once
	file_scrtmversion_proto_rawDescData = file_scrtmversion_proto_rawDesc
)

func file_scrtmversion_proto_rawDescGZIP() []byte {
	file_scrtmversion_proto_rawDescOnce.Do(func() {
		file_scrtmversion_proto_rawDescData = protoimpl.X.CompressGZIP(file_scrtmversion_proto_rawDescData)
	})
	return file_scrtmversion_proto_rawDescData
}

var file_scrtmversion_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_scrtmversion_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_scrtmversion_proto_goTypes = []interface{}{
	(FirmwareVersion_Version)(0), // 0: cloud_vmm_proto.FirmwareVersion.Version
	(*FirmwareVersion)(nil),      // 1: cloud_vmm_proto.FirmwareVersion
	(*SCRTMVersion)(nil),         // 2: cloud_vmm_proto.SCRTMVersion
}
var file_scrtmversion_proto_depIdxs = []int32{
	0, // 0: cloud_vmm_proto.SCRTMVersion.version:type_name -> cloud_vmm_proto.FirmwareVersion.Version
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_scrtmversion_proto_init() }
func file_scrtmversion_proto_init() {
	if File_scrtmversion_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scrtmversion_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scrtmversion_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRTMVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scrtmversion_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_scrtmversion_proto_goTypes,
		DependencyIndexes: file_scrtmversion_proto_depIdxs,
		EnumInfos:         file_scrtmversion_proto_enumTypes,
		MessageInfos:      file_scrtmversion_proto_msgTypes,
	}.Build()
	File_scrtmversion_proto = out.File
	file_scrtmversion_proto_rawDesc = nil
	file_scrtmversion_proto_goTypes = nil
	file_scrtmversion_proto_depIdxs = nil
}
